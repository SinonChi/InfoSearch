эт  перевод  стат  датирова  1м  сентябр  2009  год  след  эт  учест  при  прочтен    прим  пер  в  последн  месяц  ил  два  команд  инженер  digg  потрат  совс  немн  времен  на  изучен  тестирован  и  окончательн  внедрен  cassandra  в  продакш  эт  был  очен  веcел  проект  но  до  тог  как  весел  нача  нам  пришл  потрат  какое-т  врем  на  выяснен  тог  что  же  представля  соб  модел  дан  cassandra  фраз  wtf  is  a  super  column  что  за  фигн  этот  суперстолбец  был  произнес  не  один  раз  есл  вы  работа  ран  с  рсубд  эт  каса  почт  всех  вы  вероятн  будет  немн  обескураж  некотор  назван  при  изучен  модел  дан  cassandra  мне  и  мо  команд  в  digg  потребова  нескольк  дне  обсужден  прежд  чем  мы  вруб  пар  недел  назад  в  списк  рассылк  разработчик  шел  процесс  bikeshed-а  на  тем  полност  нов  схем  именован  для  разрешен  неразберих  на  всем  протяжен  дискусс  я  дума  может  есл  будет  нескольк  нормальн  пример  люд  не  будут  так  смущ  назван  так  эт  мо  попытк  объяснен  модел  дан  cassandra  он  предназнач  для  тог  чтоб  вы  ознаком  но  не  уход  в  дебр  и  над  эт  поможет  проясн  некотор  вещ  кусочк  дава  для  нача  взглян  на  строительн  блок  перед  тем  как  увид  как  он  все  могут  работа  вмест  столбец  столбец  column    эт  минимальн  элемент  дан  эт  триплет  содержа  им  значен  и  метк  времен  столбец  представлен  в  обозначен  json  {    name  emailaddress    им    value  arin@examplecom    значен    timestamp  123456789    метк  времен  }  эт  все  для  простот  можн  опуст  метк  времен  и  воспринима  столбец  как  пар  имязначен  такж  сто  отмет  что  и  им  и  значен  бинарн  техническ  byte  и  могут  быт  люб  длин  суперстолбец  суперстолбец  supercolumn    эт  совокупн  бинарн  имен  и  значен  котор  по  сут  явля  таблиц  содержа  неограничен  числ  столбц  с  ключ    имен  столбц  снов  представ  эт  в  вид  json  {    name  homeaddress      неограничен  числ  столбц    value  {        ключ  -  эт  им  столбц      street  {name  street  value  1234  x  street  timestamp  123456789}      city  {name  city  value  san  francisco  timestamp  123456789}      zip  {name  zip  value  94107  timestamp  123456789}    }  }  столбец  прот  суперстолбц  и  столбц  и  суперстолбц    эт  пар  имен  и  значен  ключев  различ  в  том  что  значен  обычн  столбц    эт  строк  а  значен  суперстолбц    эт  таблиц  столбц  эт  главн  различ  их  значен  содержат  разн  тип  дан  друг  незначительн  различ  в  том  что  суперстолбец  не  содерж  метк  времен  перед  тем  как  начн  совмеща  прежд  чем  идт  дальш  я  хоч  упрост  наш  обозначен  двум  вещ  1  распроща  с  метк  времен  в  столбц  и  2  вытащ  им  столбц  и  суперстолбц  наруж  так  что  эт  будет  выглядет  как  пар  ключзначен  так  образ  мы  перейд  от  {    name  homeaddress    value  {      street  {name  street  value  1234  x  street  timestamp  123456789}      city  {name  city  value  san  francisco  timestamp  123456789}      zip  {name  zip  value  94107  timestamp  123456789}    }  }к  homeaddress  {    street  1234  x  street    city  san  francisco    zip  94107  }  группиру  их  ест  структур  используем  для  группировк  и  столбц  и  суперстолбцовэт  структур  называ  семейств  столбц  columnfamily  и  существ  соответствен  в  двух  вариац    обычн  и  супер  семейств  столбц  семейств  столбц    эт  структур  содержа  неограничен  числ  строк  ог  ты  сказа  строк  да    строк    чтоб  эт  прощ  улож  в  голов  прост  дума  о  них  как  о  строк  таблиц  в  рсубд  итак  кажд  строк  имеет  установлен  клиент  вам  ключ  и  содерж  набор  столбц  повтор  ключ  в  набор    эт  им  столбц  и  значен    эт  сам  столбц  userprofile    {   phatduckk  {    эт  ключ  строк  внутр  семейств  столбц      у  нас  ест  неограничен  числ  столбц  в  эт  строк    username  phatduckk    email  phatduckk@examplecom    phone  900  976-6666   }    конец  строк   ieure  {    эт  ключ  друг  строк  внутр  семейств  столбц      у  нас  ест  неограничен  числ  столбц  и  в  эт  строк  тож    username  ieure    email  ieure@examplecom    phone  888  555-1212    age  66    gender  undecided   }  }  помн  для  простот  мы  показыва  тольк  значен  столбц  но  на  сам  дел  значен  в  набор    эт  цел  столбец  вы  может  дума  об  эт  как  о  хэштаблицесловар  ил  ассоциативн  массив  есл  вы  нача  так  дума  тогд  вы  на  верн  пут  хоч  заостр  ваш  вниман  на  том  что  на  эт  уровн  нет  никак  обязательн  схем  у  строк  нет  предопределен  списк  столбц  котор  он  содержат  в  наш  пример  выш  вы  вид  что  строк  с  ключ  ieure  содерж  столбц  с  имен  age  и  gender  тогд  как  строк  идентифицируем  ключ  phatduckk  не  содерж  эт  стопроцентн  гибкост  одн  строк  может  содержа  1989  столбц  тогд  как  в  друг  будет  всег  лиш  2  одн  строк  может  содержа  столбец  с  имен  foo  тогд  как  все  остальн  не  будут  вот  он    перспектив  отсутств  схем  в  cassandra  семейств  столбц  тож  может  быт  супер  итак  семейств  столбц  может  быт  тип  standard  ил  super  то  что  мы  рассмотрел  выш    эт  был  пример  тип  standard  стандартн  он  явля  пот  что  все  ег  строк  содержат  таблиц  обычн  не  супер  столбц  там  нет  суперстолбц  есл  же  семейств  столбц  имеет  тип  super  то  напрот  кажд  строк  содерж  набор  суперстолбц  набор  где  ключ  явля  им  суперстолбц  а  значен    сам  суперстолбц  и  прост  для  ясност  семейств  суперстолбц  не  содерж  обычн  столбц  вот  пример  addressbook    {   phatduckk  {    эт  ключ  строк  внутр  семейств  суперстолбц      ключ  -  им  владельц  адресн  книг      у  нас  ест  неограничен  числ  суперстолбц  в  эт  строк      ключ  внутр  строк  -  эт  им  суперстолбц      кажд  из  эт  суперстолбц  -  эт  зап  в  адресн  книг    friend1  {street  8th  street  zip  90210  city  beverley  hills  state  ca}      эт  зап  для  john'а  в  адресн  книг  phatduckk'а    john  {street  howard  street  zip  94404  city  fc  state  ca}    kim  {street  x  street  zip  87876  city  balls  state  va}    tod  {street  jerry  street  zip  54556  city  cartoon  state  co}    bob  {street  q  blvd  zip  24252  city  nowhere  state  mn}          у  нас  может  быт  неограничен  числ  суперстолбц  в  эт  строк   }    конец  строк   ieure  {    эт  ключ  друг  строк  внутр  семейств  суперстолбц    joey  {street  a  ave  zip  55485  city  hell  state  nv}    william  {street  armpit  dr  zip  93301  city  bakersfield  state  ca}   }  }  пространств  ключ  пространств  ключ  keyspace    эт  то  что  объединя  все  ваш  дан  все  ваш  семейств  столбц  наход  в  пространств  ключ  ваш  пространств  ключ  вероятн  будет  соответствова  ваш  приложен  итак  пространств  ключ  может  содержа  нескольк  семейств  столбц  но  эт  не  знач  что  он  как-т  будут  зависет  друг  от  друг  например  их  нельз  join'ит  как  таблиц  в  mysql  такж  тольк  пот  что  columnfamily_1  содерж  строк  с  ключ  phatduckk  эт  не  знач  что  columnfamily_2  тож  е  содерж  сортировк  итак  мы  выясн  как  существ  контейнер  дан  но  друг  ключев  элемент  модел  дан    эт  то  как  дан  сортир  в  cassandra  нельз  дела  так  запрос  как  в  sql    вы  не  может  указа  как  хот  отсортирова  дан  когд  дела  выборк  сред  друг  различ  дан  сортир  как  тольк  вы  запишет  их  в  кластер  и  всегд  оста  отсортирова  эт  громадн  повышен  производительн  при  чтен  но  в  обм  на  эт  преимуществ  вам  необходим  убед  что  вы  спланирова  ваш  модел  дан  так  образ  чтоб  существова  возможн  удовлетвор  ваш  схем  доступ  столбц  внутр  строк  всегд  отсортирова  по  имен  столбц  эт  важн  так  что  повтор  столбц  всегд  сортир  по  имен  как  имен  сравнива  им  завис  от  параметр  comparewith  семейств  столбц  по-умолчан  у  вас  ест  след  вариант  bytestype  utf8type  lexicaluuidtype  timeuuidtype  asciitype  и  longtype  кажд  из  эт  вариант  рассматрива  им  столбц  как  различн  тип  дан  обеспечив  некотор  гибкост  например  использован  longtype  будет  трактова  им  столбц  как  64-битн  цел  числ  дава  попробу  и  проясн  эт  взглянув  на  дан  до  и  посл  сортировк    эт  список  всех  столбц  из  одн  строк  в  случайн  порядк    cassandra  никогд  не  хран  дан  в  случайн  порядк  эт  прост  пример    такж  можн  игнорирова  значен  -  он  не  игра  вообщ  никак  рол  в  сортировк  {name  123  value  hello  there}  {name  832416  value  kjjkbcjkcbbd}  {name  3  value  101010101010}  {name  976  value  kjjkbcjkcbbd}  так  учитыв  что  мы  использу  вариант  longtype  эт  столбц  будут  выглядет  так  посл  сортировк  --  определен  семейств  столбц  в  storage-confxml  --  columnfamily  comparewithlongtype  namecf_name_here    заметьт  столбц  рассматрива  как  цел  числ    фактическ  наш  столбц  идут  в  числов  порядк  {name  3  value  101010101010}  {name  123  value  hello  there}  {name  976  value  kjjkbcjkcbbd}  {name  832416  value  kjjkbcjkcbbd}  как  вид  им  столбц  сравнива  как  есл  бы  он  был  64-битн  цел  есл  бы  мы  сейчас  использова  друг  вариант  comparewith  мы  бы  получ  друг  результат  есл  бы  мы  установ  comparewith  как  utf8type  им  столбц  трактова  бы  как  строк  в  кодировк  utf8  и  образова  так  порядок  --  определен  семейств  столбц  в  storage-confxml  --  columnfamily  comparewithutf8type  namecf_name_here    им  столбц  рассматрива  как  строк  в  кодировк  utf8  {name  123  value  hello  there}  {name  3  value  101010101010}  {name  832416  value  kjjkbcjkcbbd}  {name  976  value  kjjkbcjkcbbd}  совершен  друг  результат  этот  принцип  сортировк  примен  и  к  суперстолбц  но  у  нас  появля  ещ  одн  измерен  с  котор  над  работа  мы  определя  не  тольк  то  как  должн  сортирова  суперстолбц  но  такж  и  то  как  должн  сортива  столбц  внутр  суперстолбц  сортировк  столбц  внутр  суперстолбц  определя  значен  параметр  comparesubcolumnswith  вот  пример    эт  строк  с  двум  суперстолбц  в  не    в  дан  момент  он  в  случайн  порядк  {    перв  суперстолбец  в  строк   name  workaddress     и  столбц  в  нем   value  {    street  {name  street  value  1234  x  street}    city  {name  city  value  san  francisco}    zip  {name  zip  value  94107}   }  }  {    друг  суперстолбец  в  то  же  строк   name  homeaddress     и  столбц  в  нем   value  {    street  {name  street  value  1234  x  street}    city  {name  city  value  san  francisco}    zip  {name  zip  value  94107}   }  }  тепер  есл  мы  реш  установ  для  comparesubcolumnswith  и  comparewith  значен  utf8type  мы  получ  след  результат    тепер  он  отсортирова  {   name  homeaddress   value  {    city  {name  city  value  san  francisco}    street  {name  street  value  1234  x  street}    zip  {name  zip  value  94107}   }  }  {   name  workaddress   value  {    city  {name  city  value  san  francisco}    street  {name  street  value  1234  x  street}    zip  {name  zip  value  94107}   }  }  хоч  замет  что  в  последн  пример  comparesubcolumnswith  и  comparewith  об  установл  в  utf8type  но  эт  не  обязательн  вы  может  сочета  значен  параметр  comparesubcolumnswith  и  comparewith  как  вам  угодн  и  последн  о  чем  я  хоч  упомянут  в  связ  с  сортировк    эт  то  что  вы  может  написа  собствен  класс  для  выполнен  сортировк  сортир  механизм  подключа  независим  вы  может  установ  для  comparesubcolumnswith  и  comparewith  люб  подходя  им  класс  как  тольк  этот  класс  будет  реализовыва  интерфейс  orgapachecassandradbmarshalitype  то  ест  вы  может  созда  сво  схем  сравнен  для  сортировк     пример  схем  ладн  тепер  у  нас  ест  все  кусочк  паззл  так  что  дава  собер  их  вмест  и  смоделиру  прост  приложен  для  блог  буд  моделирова  приложен  со  след  спецификац  поддержк  одн  блог  может  быт  нескольк  автор  запис  содержат  заголовок  тел  уникальн  метк  и  дат  публикац  запис  могут  быт  ассоциирова  с  люб  чис  тег  люд  могут  оставля  комментар  но  не  могут  регистрирова  он  ввод  информац  о  себ  кажд  раз  занов  прост  упроща  комментар  содержат  текст  врем  когд  был  оставл  и  им  комментатор  должн  быт  возможн  показа  все  пост  в  порядк  обратн  хронологическ  сам  нов  вверх  должн  быт  возможн  показа  все  пост  по  тег  в  порядк  обратн  хронологическ  кажд  из  след  раздел  будет  описыва  семейств  столбц  котор  мы  буд  определя  в  пространств  ключ  наш  приложен  показыва  определен  в  xml  говор  поч  мы  выбра  тот  ил  ин  вариант  сортировк  а  так  же  показыва  дан  семейств  столбц  в  вид  json  семейств  столбц  authors  моделирован  семейств  столбц  автор    эт  достаточн  базов  мы  не  буд  зде  дела  нич  крут  мы  назнач  кажд  автор  по  строк  и  ключ  и  эт  будет  полн  им  автор  кажд  столбец  в  строк  будет  представля  соб  определен  параметр  профил  автор  эт  пример  использован  строк  как  объект  в  дан  случа  объект  author  с  так  подход  кажд  столбец  будет  служ  в  качеств  свойств  объект  очен  прост  я  хоч  обрат  вниман  что  так  как  нет  никак  определен  тог  как  столбц  должн  быт  представл  в  строк  мы  мож  зада  эт  определен  сам  мы  буд  получа  строк  из  наш  семейств  столбц  с  помощ  ключ  и  выбира  все  столбц  для  кажд  строк  то  ест  например  мы  не  буд  выбира  тольк  перв  3  столбц  из  строк  с  ключ  foo  эт  означа  что  для  нас  не  имеет  значен  как  будут  отсортирова  столбц  так  что  буд  использова  сортировк  bytestype  пот  что  он  не  треб  никак  валидац  для  им  столбц  --    columnfamily  authors    мы  буд  хран  тут  дан  об  автор    ключ  строк    им  автор  подразумева  что  им  уникальн    им  столбц  параметр  запис  email  bio  и  тд    значен  столбц  соответств  значен  параметр    выборк  получен  автор  по  имен  выбира  все  столбц  из  соответств  имен  строк    authors    {    семейств  столбц      arin  sarkissian    {    ключ  строк          столбц  параметр  профил        numposts  11        twitter  phatduckk        email  arin@examplecom        bio  bla  bla  bla      }        и  друг  автор      author  2  {              }    }  --  columnfamily  comparewithbytestype  nameauthors  семейств  столбц  blogentries  и  снов  семейств  столбц  будет  вест  себ  как  прост  хранилищ  ключзначен  мы  буд  хран  одн  зап  в  одн  строк  столбц  в  строк  будут  служ  параметр  запис  заголовок  тел  и  тд  так  же  как  и  в  предыдущ  пример  небольш  оптимизац  мы  денормализу  тег  в  один  столбец  как  строк  разделен  запят  на  вывод  мы  буд  разбива  значен  столбц  чтоб  получ  список  тег  ключ  кажд  строк  будет  уникальн  метк  slug  так  что  для  выборк  единствен  запис  мы  буд  иска  е  по  эт  метк  --    columnfamily  blogentries    все  запис  в  блог  будут  хран  тут    ключ  строк    уникальн  метк  пост  он  будет  использова  в  урл    им  столбц  параметр  запис  заголовок  тел  и  тд    значен  столбц  соответств  значен  параметр    выборк  получен  запис  по  уникальн  метк  всегд  выбира  все  столбц  в  строк    к  ваш  сведен  параметр  tags  денормализирова  эт  разделен  запят  список  тег    я  не  использ  json  чтоб  не  пута  наш  обозначен  но  очевидн    вы  может  хран  дан  как  угодн  есл  ваш  приложен  знает  как  с  ним  работа    blogentries    {    семейств  столбц      i-got-a-new-guitar    {    ключ  строк  -  уникальн  метк  запис  slug        title  this  is  a  blog  entry  about  my  new  awesome  guitar        body  this  is  a  cool  entry  etc  etc  yada  yada        author  arin  sarkissian   ключ  строк  в  семейств  столбц  authors        tags  lifeguitarmusic        pubdate  1250558004     дат  публикац  в  формат  unixtime        slug  i-got-a-new-guitar      }        друг  запис      another-cool-guitar    {                tags  guitar        slug  another-cool-guitar      }      scream-is-the-best-movie-ever    {                tags  moviehorror        slug  scream-is-the-best-movie-ever      }    }  --  columnfamily  comparewithbytestype  nameblogentries  семейств  столбц  taggedposts  итак  наконец  будет  что-т  интересн  эт  семейств  столбц  покажет  нам  нов  уровен  он  будет  отвеча  за  хранен  связ  межд  тег  и  пост  он  будет  хран  не  тольк  связ  но  и  позвол  нам  выбира  все  запис  в  блог  по  определеннм  тег  в  отсортирова  порядк  помн  все  что  мы  зна  о  сортировк  особен  решен  котор  я  хоч  отмет  в  том  что  логик  наш  приложен  должн  прикрепля  к  кажд  запис  blogentry  тег  __notag__  я  ег  тольк  что  придума  так  тег  позвол  нам  использова  эт  семейств  стобц  такж  и  для  хранен  списк  всех  запис  в  блог  в  отсортирова  вид  эт  небольш  трюк  котор  даст  возможн  использова  тольк  одн  семейств  столбц  для  двух  выборок  показа  все  последн  пост  и  показа  все  последн  пост  с  тег  `foo`  согласн  эт  модел  дан  запис  с  трем  тег  будут  соответствова  по  1  столбц  в  4  строк  по  одн  для  кажд  тег  и  одн  для  служебн  тег  __notag__  так  как  мы  реш  что  буд  отобража  списк  запис  в  хронологическ  порядк  нам  над  сдела  так  чтоб  им  столбц  был  тип  timeuuid  и  установ  для  параметр  comparewith  значен  timeuuidtype  эт  отсортир  столбц  по  времен  так  что  использован  запрос  тип  получ  последн  10  запис  с  тег  `foo`  будет  очен  эффективн  операц  тепер  когд  мы  захот  отобраз  последн  10  запис  на  главн  например  нам  нужн  будет  взят  последн  10  столбц  по  ключ  __notag__  тег  все  пост  пройт  цикл  по  эт  набор  столбц  в  цикл  мы  зна  что  значен  кажд  столбц    эт  ключ  строк  в  семейств  столбц  blogentries  так  что  мы  использу  этот  ключ  чтоб  получ  строк  для  эт  запис  из  семейств  столбц  blogentries  так  мы  получа  все  дан  о  запис  один  из  столбц  в  строк  blogentries  назва  author  и  ег  значен    эт  ключ  в  семейств  столбц  authors  и  мы  использу  ег  чтоб  получ  дан  профил  автор  итак  у  нас  ест  дан  пост  и  дан  автор  дальш  мы  разбива  столбец  с  тег  чтоб  получ  список  тег  тепер  у  нас  ест  все  чтоб  отобраз  этот  пост  пок  без  комментар    эт  страниц  списк  пост  а  не  конкретн  пост  мы  мож  продела  эт  процедур  использу  люб  тег  он  работа  и  для  всех  запис  и  для  запис  с  тег  `foo`  врод  неплох  --    columnfamily  taggedposts    вспомогательн  индекс  для  определен  как  запис  в  blogentries  соответств  тег    ключ  строк    тег    им  столбц  timeuuidtype    значен  столбц  ключ  строк  в  семейств  столбц  blogentries    выборк  получен  срез  запис  с  тег  foo    мы  использу  эт  семейств  столбц  чтоб  определ  как  запис  блог  показыва  по  тег    мы  буд  чуточк  гетт  и  использу  строк  __notag__  подразумев  тег  не  имеет  значен    кажд  запис  будет  соответствова  столбец  в  эт  строк    эт  знач  что  у  нас  будет  кол-в  тег  +  1  столбц  на  кажд  пост    taggedposts    {    семейств  столбц        запис  блог  с  тег  guitar      guitar    {        timeuuid_1    i-got-a-new-guitar        timeuuid_2    another-cool-guitar      }        все  запис  в  блог      __notag__    {        timeuuid_1b    i-got-a-new-guitar          заметьт  что  так  столбец  ест  и  в  строк  guitar        timeuuid_2b    another-cool-guitar          а  так  -  в  строк  movie        timeuuid_2b    scream-is-the-best-movie-ever      }        запис  блог  с  тег  movie      movie  {        timeuuid_1c  scream-is-the-best-movie-ever      }    }  --  columnfamily  comparewithtimeuuidtype  nametaggedposts  семейств  столбц  comments  последн  что  мы  должн  выясн    как  смоделирова  коммент  и  тут  наконец  нам  понадоб  суперстолбц  у  нас  будет  1  строк  на  пост  в  качеств  ключ  буд  использова  те  же  ключ  что  использова  для  пост  в  строк  у  нас  будут  суперстолбц  для  кажд  комментар  сво  имен  суперстолбц  будут  уникальн  идентификатор  тип  timeuuidtype  так  мы  гарантиру  что  все  комментар  к  пост  отсортирова  в  хронологическ  порядк  столбц  в  кажд  суперстолбц  будут  параметр  комментар  им  комментатор  врем  комментар  и  тд  итак  эт  довольн  прост  до  сих  пор  нич  сверхъестесствен  --    columnfamily  comments    зде  мы  хран  комментар    ключ  строк    ключ  строк  в  blogentries    им  суперстолбц  timeuuidtype    выборк  получен  всех  комментар  к  запис    comments    {        комментар  для  scream-is-the-best-movie-ever      scream-is-the-best-movie-ever    {          вначал  стар  комментар        timeuuid_1    {    им  суперстолбц            все  столбц  в  суперстолбц  -  дан  комментар          commenter  joe  blow          email  joeb@examplecom          comment  you're  a  dumb  douche  the  godfather  is  the  best  movie  ever          commenttime  1250438004        }          ещ  комментар  к  scream-is-the-best-movie-ever          в  конц  -  последн  комментар        timeuuid_2    {          commenter  some  dude          email  sd@examplecom          comment  be  nice  joe  blow  this  isnt  youtube          commenttime  1250557004        }      }        комментар  для  i-got-a-new-guitar      i-got-a-new-guitar    {        timeuuid_1    {          commenter  johnny  guitar          email  guitardude@examplecom          comment  nice  axe  dawg          commenttime  1250438004        }      }              ещ  строк  для  друг  запис    }  --  columnfamily  comparewithtimeuuidtype  columntypesuper    comparesubcolumnswithbytestype  namecomments  woot  эт  все  наш  маленьк  приложен  блог  смоделирова  и  готов  к  эксплуатац  совс  немн  перевар  и  оконч  вы  с  очен  маленьк  куск  xml  в  ваш  storage-confxml  keyspace  namebloggyappy   --    --   --  cf  definitions  --   columnfamily  comparewithbytestype  nameauthors   columnfamily  comparewithbytestype  nameblogentries   columnfamily  comparewithtimeuuidtype  nametaggedposts   columnfamily  comparewithtimeuuidtype  namecomments    comparesubcolumnswithbytestype  columntypesuper  keyspace  тепер  все  что  вам  нужн  сдела    разобра  как  записыва  и  считыва  дан  из  cassandra  эт  можн  осуществля  с  помощ  thrift  interface  на  wiki-страниц  api  cassandra  сдела  приличн  работ  по  объяснен  как  с  эт  работа  так  что  я  не  буд  вдава  во  все  эт  дета  но  вообщ  вы  может  прост  скомпилирова  файл  cassandrathrift  и  использова  сгенерирова  код  для  доступ  к  api  такж  вы  может  воспользова  преимуществ  клиент  ruby  ил  клиент  для  python  ладн  над  все  эт  дал  вам  почувствова  что  же  все-так  за  фигн  этот  суперстолбец  и  вы  начнет  создава  классн  приложен  от  переводчик  стара  перевест  максимальн  близк  к  оригинал  над  на  конструктивн  критик  update  спасиб  honeyman  за  исправлен  и  ссылк  24082010  перенес  в  блог  nosql  