разработчик  приложен  для  android  ориентир  при  разработк  на  все  вышедш  устройств  наверняк  знаком  с  эт  схем  на  1  июл  2010  год  эт  был  статистик  запущен  верс  android  с  выход  нов  верс  android  разработчик  стал  задумыва  добав  в  приложен  нов  функц  предоставлен  нов  верс  либ  сдела  ег  доступн  на  как  можн  больш  количеств  устройств  опытн  разработчик  уж  удостовер  что  эт  два  вариант  явля  взаимоисключа  и  сохранен  баланс  межд  ним  может  быт  болезнен  в  эт  стат  я  покаж  вам  что  эт  не  так  нескольк  недел  назад  в  наш  стат  мы  рассмотрел  как  обраща  с  мультитач  на  android  20  eclair  и  выш  получ  в  конц  прост  демонстрацион  приложен  в  эт  стат  мы  передела  наш  приложен  так  чтоб  он  правильн  работа  на  всех  верс  вплот  до  android  15  вы  может  взят  исходник  стар  приложен  на  google  code  проблем  в  манифест  тэг  uses-sdk  в  androidmanifestxml  может  быт  уточн  двум  параметр  minsdkversion  и  targetsdkversion  эт  вы  может  сказа  что  приложен  готов  к  работ  на  стар  верс  но  в  то  же  врем  может  работа  и  на  нов  тепер  вы  может  использова  нов  sdk  для  разработк  но  есл  вы  будет  использова  непосредствен  функциональн  нов  платформ    вот  что  вы  может  увидет  в  системн  журнал  edalvikvm   792  could  not  find  method  androidviewmotioneventgetx  referenced  from  method  comexampleandroidtouchexampletouchexampleviewontouchevent  wdalvikvm   792  vfy  unable  to  resolve  virtual  method  17  landroidviewmotioneventgetx  if  wdalvikvm   792  vfy   rejecting  opcode  0x6e  at  0x0006  wdalvikvm   792  vfy   rejected  lcomexampleandroidtouchexampletouchexampleviewontouchevent  landroidviewmotioneventz  wdalvikvm   792  verifier  rejected  class  lcomexampleandroidtouchexampletouchexampleview  dandroidruntime   792  shutting  down  vm  wdalvikvm   792  threadid3  thread  exiting  with  uncaught  exception  group0x4000fe70  мы  неправильн  указа  minsdkversion  и  вот  он  результат  мы  разрабатыва  наш  приложен  на  sdk  8  froyo  но  остав  параметр  minsdkversion”3”  cupcake  мы  как  бы  сказа  приложен  что  осозна  сво  намерен  и  не  буд  прос  невозможн  есл  мы  остав  все  так  как  ест    наш  пользовател  со  стар  верс  sdk  увид  некрасив  сообщен  об  ошибк  конечн  же  толп  обижен  пользовател  будут  оценива  ваш  приложен  в  маркет  на  1  звезд  чтоб  избежа  эт  мы  должн  сдела  безопасн  доступ  к  функц  нов  платформ  без  сердит  проверок  на  бол  стар  верс  систем  метод  отражен  мног  разработчик  уж  знаком  с  практик  решен  эт  проблем  с  помощ  отражен  reflection  отражен  позволя  код  взаимодействова  со  сред  выполнен  и  определя  когд  целев  метод  ил  класс  существ  и  вызыва  их  либ  создава  экземпляр  не  кас  их  непосредствен  перспектив  запрос  функц  друг  платформ  целенаправлен  либ  условн  ссыл  на  отражен    эт  не  хорош  эт  уродлив  эт  медлен  эт  громоздк  прежд  всег  ег  интенсивн  использован  в  код  преврат  ег  в  неудобн  для  дальн  поддержк  мусор  что  есл  я  скаж  что  ест  способ  писа  приложен  ориентирова  на  android  15  cupcake  использу  22  froyo  с  помощ  одн  код  и  не  использу  отражен  отложен  загрузк  исследовател  bill  pugh  опубликова  и  распростран  метод  написан  синглтон  в  java  со  всем  преимуществ  использован  отложен  загрузк  classloader'ов  материа  из  википед  объясня  этот  метод  код  выгляд  так  public class singleton {br     private constructor prevents instantiation from other classesbr    private singleton {}br    br      singletonholder загружается при первой проверке singletongetinstance br     или при первом доступе к singletonholderinstance не ранееbr     br    private static class singletonholder { br      private static final singleton instance  new singletonbr    }br    public static singleton getinstance {br      return singletonholderinstancebr    }br  }  очен  важн  част  ег  работ  описа  в  комментар  java  класс  загружа  и  инициализир  при  перв  доступ    созда  на  перв  врем  экземпляр  класс  либ  получа  доступ  к  метод  ил  одн  из  ег  статическ  пол  эт  важн  для  нас  пот  что  класс  проверя  виртуальн  машин  тольк  когд  он  загруж  не  раньш  тепер  у  нас  ест  все  для  тог  чтоб  писа  приложен  для  android  не  использу  метод  отражен  проектирован  совместим  как  оказа  на  практик  эт  довольн  прост  как  прав  вы  хот  чтоб  ваш  приложен  корректн  деградирова  на  стар  верс  платформ  убир  некотор  функц  либ  разрабатыв  альтернативн  поскольк  функциональн  android  связа  тольк  с  верс  api  у  вас  ест  тольк  одн  вещ  за  котор  вы  должн  след  при  проектировк  совместим  в  большинств  случа  этот  вариант  поддержк  может  быт  реализова  как  прост  иерарх  класс  вы  может  спроектирова  ваш  приложен  для  доступ  к  функц  чувствительн  к  верс  использу  независя  от  верс  интерфейс  либ  абстрактн  класс  подкласс  в  интерфейс  предназначен  для  запуск  на  нов  верс  платформ  может  поддержива  нов  возможн  систем  а  подкласс  предназначен  для  запуск  на  бол  стар  верс  платформ  должн  предоставля  функциональн  приложен  альтернативн  пут  воплощен  принцип  на  практик  в  начал  эт  стат  я  сказа  что  мы  буд  переделыва  сдела  ран  приложен  для  работ  с  мультитач  с  верс  api  3  cupcake  под  верс  8  froyo  в  опубликова  ран  стат  я  отмет  что  gesturedetectors  явля  полезн  образц  для  абстрагирован  обработк  событ  сенсор  тогд  я  не  понима  как  быстр  эт  реализ  и  протестир  мы  мож  передела  завися  от  верс  элемент  демо-приложен  и  реализова  все  эт  с  помощ  абстрактн  gesturedetector  перед  тем  как  нача  работ  мы  должн  измен  наш  манифест  чтоб  заяв  о  поддержк  api  верс  3  с  помощ  minsdkversion  в  тэг  uses-sdk  им  в  вид  что  мы  до  сих  пор  ориентиру  на  верс  8  эт  такж  нужн  отмет  в  параметр  targetsdkversion  ваш  манифест  тепер  наш  манифест  будет  выглядет  так  xml version10 encodingutf-8br  manifest xmlnsandroidschemasandroidcomapkresandroidbr        packagecomexampleandroidtouchexamplebr        androidversioncode1br        androidversionname10br      application androidicon@drawableicon androidlabel@stringapp_namebr          activity androidnametouchexampleactivitybr                    androidlabel@stringapp_namebr              intent-filterbr                  action androidnameandroidintentactionmain br                  category androidnameandroidintentcategorylauncher br              intent-filterbr          activitybr      applicationbr      uses-sdk androidminsdkversion3 androidtargetsdkversion8 br  manifest  наш  класс  touchexampleview  не  совмест  с  верс  android  вплот  до  froyo  из-з  использован  scalegesturedetector  и  не  совмест  с  верс  ниж  eclair  из-з  использован  нов  метод  motionevent  котор  считыва  дан  с  мультитач  мы  должн  абстрагирова  эт  функциональн  в  класс  котор  не  будут  загружа  на  верс  не  поддержива  дан  функциональн  для  эт  мы  создад  нов  класс  назов  ег  versionedgesturedetector  в  приложении-пример  пользовател  доступн  2  жест  перетаскиван  drag  и  масштаб  scale  следовательн  versionedgesturedetector  долж  определя  два  событ  ondrag  и  onscale  touchexampleview  долж  получа  экземпляр  класс  versionedgesturedetector  соответств  верс  платформ  фильтрова  поступа  событ  через  нег  и  соответствен  реагирова  на  ondrag  и  onscale  перв  вариант  versionedgesturedetector  будет  так  public abstract class versionedgesturedetector {br      ongesturelistener mlistenerbr   br      public abstract boolean ontoucheventmotionevent evbr   br      public interface ongesturelistener {br          public void ondragfloat dx float dybr          public void onscalefloat scalefactorbr      }br  }  снача  приложен  старт  с  прост  функциональн  ориентирова  на  cupcake  для  простот  в  эт  пример  мы  буд  воплоща  поддержк  кажд  верс  с  помощ  статическ  внутрен  класс  в  versionedgesturedetector  конечн  вы  может  реализова  эт  так  как  вам  захочет  при  эт  использу  показа  выш  техник  отложен  загрузк  либ  эквивалентн  е  не  трога  класс  котор  напрям  использ  функциональн  не  поддержива  дан  верс  платформ  private static class cupcakedetector extends versionedgesturedetector {br      float mlasttouchxbr      float mlasttouchybr      @overridebr      public boolean ontoucheventmotionevent ev {br          switch evgetaction {br          case motioneventaction_down {br              mlasttouchx  evgetxbr              mlasttouchy  evgetybr              breakbr          }br          case motioneventaction_move {br              final float x  evgetxbr              final float y  evgetybr              mlistenerondragx - mlasttouchx y - mlasttouchybr   br              mlasttouchx  xbr              mlasttouchy  ybr              breakbr          }br          }br          return truebr      }br  }  эт  прост  реализац  организац  событ  ondrag  при  перемещен  указател  по  экран  значен  котор  он  принима  равн  пройден  указател  пут  по  x  и  по  y  начин  с  верс  eclair  мы  должн  четк  отслежива  идентификатор  указател  чтоб  не  допуст  появлен  дополнительн  указател  уходя  за  предел  экра  базов  реализац  ontouchevent  в  cupcakedetector  может  отслежива  перемещен  указател  но  с  двум  хитрост  мы  должн  добав  метод  getactivex  и  getactivey  для  получен  соответств  координат  и  переопределен  их  в  eclairdetector  для  получен  корректн  координат  указател   br  private static class cupcakedetector extends versionedgesturedetector {br      float mlasttouchxbr      float mlasttouchybr   br      float getactivexmotionevent ev {br          return evgetxbr      }br      float getactiveymotionevent ev {br          return evgetybr      }br      @overridebr      public boolean ontoucheventmotionevent ev {br          switch evgetaction {br          case motioneventaction_down {br              mlasttouchx  getactivexevbr              mlasttouchy  getactiveyevbr              breakbr          }br          case motioneventaction_move {br              final float x  getactivexevbr              final float y  getactiveyevbr              mlistenerondragx - mlasttouchx y - mlasttouchybr   br              mlasttouchx  xbr              mlasttouchy  ybr              breakbr          }br          }br          return truebr      }br  }  тепер  eclairdetector  переопределен  нов  метод  getactivex  и  getactivey  больш  част  эт  код  должн  быт  вам  знаком  из  оригинальн  пример  описа  в  начал  стат   br  private static class eclairdetector extends cupcakedetector {br      private static final int invalid_pointer_id  -1br      private int mactivepointerid  invalid_pointer_idbr      private int mactivepointerindex  0br      @overridebr      float getactivexmotionevent ev {br          return evgetxmactivepointerindexbr      }br      @overridebr      float getactiveymotionevent ev {br          return evgetymactivepointerindexbr      }br      @overridebr      public boolean ontoucheventmotionevent ev {br          final int action  evgetactionbr          switch action & motioneventaction_mask {br          case motioneventaction_downbr              mactivepointerid  evgetpointerid0br              breakbr          case motioneventaction_cancelbr          case motioneventaction_upbr              mactivepointerid  invalid_pointer_idbr              breakbr          case motioneventaction_pointer_upbr              final int pointerindex  evgetaction & motioneventaction_pointer_index_mask br                   motioneventaction_pointer_index_shiftbr              final int pointerid  evgetpointeridpointerindexbr              if pointerid  mactivepointerid {br                   this was our active pointer going up choose a newbr                   active pointer and adjust accordinglybr                  final int newpointerindex  pointerindex  0  1  0br                  mactivepointerid  evgetpointeridnewpointerindexbr                  mlasttouchx  evgetxnewpointerindexbr                  mlasttouchy  evgetynewpointerindexbr              }br              breakbr          }br          mactivepointerindex  evfindpointerindexmactivepointeridbr          return superontoucheventevbr      }br  }  eclairdetector  вызыва  superontouchevent  посл  определен  идентификатор  указател  запуска  cupcakedetector  для  определен  событ  перемещен  drag  мультиплатформен  не  должн  стат  причин  для  дублирован  код  наконец  дава  добав  scalegesturedetector  котор  будет  реализовыва  поддержк  жест  масштабирован  для  froyo  для  тог  чтоб  избежа  перемещен  во  врем  масштабирован  мы  должн  добав  нескольк  изменен  в  cupcakedetector  у  некотор  тачскрин  ест  проблем  с  масштабирован  поэт  мы  должн  учест  эт  мы  добав  метод  shoulddrag  в  cupcakedetector  котор  будет  осуществля  проверк  перед  отправк  событ  ondrag  финальн  верс  cupcakedetector  private static class cupcakedetector extends versionedgesturedetector {br      float mlasttouchxbr      float mlasttouchybr   br      float getactivexmotionevent ev {br          return evgetxbr      }br      float getactiveymotionevent ev {br          return evgetybr      }br   br      boolean shoulddrag {br          return truebr      }br      @overridebr      public boolean ontoucheventmotionevent ev {br          switch evgetaction {br          case motioneventaction_down {br              mlasttouchx  getactivexevbr              mlasttouchy  getactiveyevbr              breakbr          }br          case motioneventaction_move {br              final float x  getactivexevbr              final float y  getactiveyevbr   br              if shoulddrag {br                  mlistenerondragx - mlasttouchx y - mlasttouchybr              }br   br              mlasttouchx  xbr              mlasttouchy  ybr              breakbr          }br          }br          return truebr      }br  }  eclairdetector  оста  неизмен  froyodetector  ниж  shoulddrag  долж  возвраща  положительн  значен  пок  неактивн  масштабирован  private static class froyodetector extends eclairdetector {br      private scalegesturedetector mdetectorbr      public froyodetectorcontext context {br          mdetector  new scalegesturedetectorcontextbr                  new scalegesturedetectorsimpleonscalegesturelistener {br                      @override public boolean onscalescalegesturedetector detector {br                          mlisteneronscaledetectorgetscalefactorbr                          return truebr                      }br                  }br      }br      @overridebr      boolean shoulddrag {br          return mdetectorisinprogressbr      }br      @overridebr      public boolean ontoucheventmotionevent ev {br          mdetectorontoucheventevbr          return superontoucheventevbr      }br  }  тепер  у  нас  ест  реализац  детектор  жест  тепер  мы  должн  найт  способ  созда  ег  дава  создад  метод  versionedgesturedetector  public static versionedgesturedetector newinstancecontext contextbr          ongesturelistener listener {br      final int sdkversion  integerparseintbuildversionsdkbr      versionedgesturedetector detector  nullbr      if sdkversion  buildversion_codeseclair {br          detector  new cupcakedetectorbr      } else if sdkversion  buildversion_codesfroyo {br          detector  new eclairdetectorbr      } else {br          detector  new froyodetectorcontextbr      }br      detectormlistener  listenerbr      return detectorbr  }  поскольк  мы  ориентиру  на  cupcake  мы  ещ  не  име  доступ  к  buildversionsdk_int  вмест  нег  мы  должн  использова  нын  устаревш  buildversionsdk  наш  versionedgesturedetector  гот  тепер  нужн  совмест  ег  с  touchexampleview  котор  стал  значительн  короч  public class touchexampleview extends view {br      private drawable miconbr      private float mposxbr      private float mposybr      private versionedgesturedetector mdetectorbr      private float mscalefactor  1fbr      public touchexampleviewcontext context {br          thiscontext null 0br      }br      public touchexampleviewcontext context attributeset attrs {br          thiscontext attrs 0br      }br      public touchexampleviewcontext context attributeset attrs int defstyle {br          supercontext attrs defstylebr          micon  contextgetresourcesgetdrawablerdrawableiconbr          miconsetbounds0 0 micongetintrinsicwidth micongetintrinsicheightbr   br          mdetector  versionedgesturedetectornewinstancecontext new gesturecallbackbr      }br      @overridebr      public boolean ontoucheventmotionevent ev {br          mdetectorontoucheventevbr          return truebr      }br      @overridebr      public void ondrawcanvas canvas {br          superondrawcanvasbr          canvassavebr          canvastranslatemposx mposybr          canvasscalemscalefactor mscalefactorbr          micondrawcanvasbr          canvasrestorebr      }br      private class gesturecallback implements versionedgesturedetectorongesturelistener {br          public void ondragfloat dx float dy {br              mposx + dxbr              mposy + dybr              invalidatebr          }br          public void onscalefloat scalefactor {br              mscalefactor  scalefactorbr               don't let the object get too small or too largebr              mscalefactor  mathmax01f mathminmscalefactor 50fbr              invalidatebr          }br      }br  }  заключен  вот  мы  и  адаптирова  наш  приложен  для  корректн  работ  на  android  15  через  лучш  нов  функц  предоставлен  платформ  и  без  един  использован  отражен  те  же  сам  принцип  можн  примен  к  люб  нов  особен  android  позвол  ваш  приложен  запуска  на  бол  стар  верс  android  classloader  загружа  класс  отложен  провер  их  при  перв  доступ  функциональн  и  интерфейс  завися  от  верс  платформ  завися  от  верс  реализац  базирова  на  верс  платформ  определен  во  врем  выполнен  эт  избавля  classloader  от  использован  класс  котор  не  смогут  быт  выполн  корректн  чтоб  увидет  окончательн  верс    посет  раздел  cupcake  на  google  code  дополнительн  информац  в  эт  пример  мы  не  стал  предлага  альтернативн  пут  для  пользовател  использ  ос  вышедш  до  froyo  т к  scalegesturedetector  стал  доступ  тольк  в  22  для  реальн  приложен  мы  хотел  бы  предлож  альтернативн  пут  традицион  телефон  с  android  имеют  хардварн  кнопк  управлен  зум  класс  zoomcontrols  и  zoombuttonscontroller  помогут  вам  в  реализац  дан  пут  реализац  эт  и  будет  упражнен  для  читател  