ещ  в  тот  момент  когд  я  писа  первоначальн  обзор  vp8  я  обрат  вниман  на  то  что  официальн  декодер  libvpx  весьм  медлен  нет  особен  причин  по  котор  он  долж  быт  ощутим  быстр  хорош  декодер  h264  но  и  так  медлен  ем  тож  быт  не  с  чег  так  что  у  мен  возник  план  написа  луш  вариант  для  ffmpeg  вмест  с  рональд  балт  ronald  bultje  и  дэвид  конрад  david  conrad  эт  реализац  декодер  должн  был  разрабатыва  сообществ  и  быт  свободн  с  сам  нача  в  отлич  от  свалк  проприетарн  код  котор  представл  соб  библиотек  libvpx  нескольк  недел  назад  декодер  был  достаточн  заверш  для  обеспечен  бинарн  совместим  видеопоток  с  libvpx  что  сдела  ег  перв  независим  и  свободн  реализац  декодер  vp8  тепер  когд  мы  заверш  перв  цикл  оптимизац  он  долж  был  гот  к  использован  в  реальн  услов  я  расскаж  о  детал  процесс  разработк  позж  а  сейчас  дава  перейд  к  сам  сол  эт  пост  результат  сравнительн  тестирован  производительн  кодек  мы  тестирова  декодер  на  двух  1080p  клип  parkjoy  снят  вжив  и  sintel  trailer  созда  на  компьютер  тестирован  выполня  так  time  ffmpeg  -vcodec  {libvpx  or  vp8}  -i  input  -vsync  0  -an  -f  null  -  мы  использова  последн  на  момент  эт  пост  сборк  ffmpeg  из  svn  последн  ревиз  содержа  оптимизац  vp8  декодер  был  r24471  как  показыва  эт  график  ffvp8  значительн  быстр  libvpx  в  особен  на  64-битн  платформ  даж  на  процессор  atom  он  работа  ощутим  быстр  несмотр  на  то  что  специальн  для  atom  мы  ег  ещ  даж  не  оптимизирова  во  мног  случа  от  эт  разниц  в  производительн  будет  зависет  воспроизвод  виде  ил  нет  в  особен  в  современ  браузер  движк  котор  отъеда  значительн  част  ресурс  процессор  хот  чтоб  виде  в  vp8  игра  быстр  нов  верс  плеер  основа  на  ffmpeg  а  эт  всем  известн  vlc  и  мног  друг  будут  включа  библиотек  ffvp8  хот  чтоб  виде  в  vp8  быстр  декодирова  в  ваш  браузер  обща  с  ег  разработчик  и  настаива  чтоб  он  использова  ffvp8  вмест  libvpx  я  полага  что  перв  на  использован  ffvp8  перейдет  chrome  так  как  он  уж  использ  libavcodec  в  сво  подсистем  воспроизведен  виде  помн  что  разработк  ffvp8  на  эт  не  заканчива  мы  буд  продолжа  улуча  и  ускоря  ег  у  нас  все  ещ  ест  очеред  оптимизац  до  сих  пор  не  внесен  в  основн  ветк  разработк  разработк  ffvp8  перв  задач  за  котор  взял  дэвид  и  рональд  заключа  в  воссоздан  ядр  декодер  и  доведен  ег  до  бинарн  совместим  поток  с  libvpx  эт  был  непрост  учитыв  неполн  официальн  спецификац  мног  част  спецификац  вообщ  был  неправильн  и  противореч  код  libvpx  и  уж  конечн  никак  не  помог  наш  работ  тот  факт  что  набор  официальн  тест  совместим  даж  не  покрыва  все  особен  котор  использ  официальн  кодер  для  тог  чтоб  как-т  работа  дальш  при  так  положен  вещ  нам  пришл  нача  добавля  сво  собствен  тест  но  я  уж  жалова  на  недостаточн  качеств  спецификац  в  сво  предыдущ  пост  так  что  дава  перейд  к  нюанс  след  шаг  стал  добавлен  код  simd  для  всех  важн  функц  dsp  в  основн  нагрузк  на  процессор  в  декодер  vp8  созда  компенсац  движен  и  фильтр  деблокинг  компенсац  артефакт  кодирован  пер    так  же  как  и  в  h264  но  в  отлич  от  h264  фильтр  деблокинг  полага  на  внутрен  арифметик  с  насыщен  котор  нич  не  сто  в  simd-реализац  но  весьм  прожорлив  в  отношен  процессор  в  реализац  на  c  разумеет  ни  то  ни  друг  не  представля  серьезн  проблем  так  как  во  всех  нормальн  кодек  эт  процесс  реализова  в  вид  код  simd  я  помога  рональд  с  simd  для  x86  а  такж  написа  больш  част  компенсац  движен  внутрен  предсказан  и  част  обратн  преобразован  рональд  написа  оста  част  обратн  преобразован  и  част  компенсац  движан  кром  тог  он  сдела  сам  трудн  част  фильтр  деблокинг  эт  фильтр    всегд  сложн  част  так  как  в  кажд  кодек  он  разн  реализац  компенсац  движен  для  сравнен  обычн  не  слишк  отлича  в  разн  кодек  6-tap  фильтр  в  люб  случа  будет  6-tap  фильтр  и  разниц  обычн  тольк  в  коэффициент  сам  больш  сложност  в  фильтр  деблокинг  simd  заключа  в  том  чтоб  избега  распаковк  те  переход  от  8  бит  к  16-ти  мног  операц  в  так  фильтр  изначальн  кажут  треб  точност  превыша  8  бит  прост  пример  для  x86  absa-b  где  a  и  b    цел  8-битн  числ  без  знак  результат  a-b  треб  точност  в  9  бит  со  знак  так  как  может  быт  где  угодн  в  предел  от  -255  до  255  так  что  он  не  может  помест  в  8  бит  но  вполн  возможн  реш  эт  задач  без  распаковк  satsubab    satsubba  где  satsub  вычисля  разност  с  насыщен  межд  двум  значен  есл  разниц  положительн  возвраща  результат  в  противн  случа    нол  так  что  выполнен  логическ  ил  межд  результат  работ  эт  функц  как  раз  дает  нам  то  что  нужн  эт  треб  4  ассемблерн  инструкц  на  x86  распаковк  потребова  бы  по  меньш  мер  10  включ  собствен  шаг  распаковк  и  упаковк  зат  последова  simd-оптимизац  код  на  c  выполнен  котор  все  ещ  занима  значительн  част  времен  декодирован  одн  из  мо  сам  больш  оптимизац  заключа  в  добавлен  умн  предвартельн  загрузк  сокраща  количеств  промах  кэш  ffvp8  предзапрашива  кадр  на  котор  ссыла  текущ  предыдущ  золот  и  альтернативн  ссылк  он  же  previous  gold  и  altref  но  тольк  тогд  когд  он  действительн  ощутим  использ  в  дан  кадр  эт  позволя  нам  предзапрашива  все  что  нам  нужн  и  не  запрашива  то  что  мы  вряд  ли  использу  libvpx  как  прав  кодир  кадр  котор  почт  никогд  но  не  сто  понима  эт  как  совс  никогд  не  использ  кадр  golden  ил  altref  так  что  эт  оптимизац  значительн  сокраща  врем  затрачива  на  предзапрос  во  мног  реальн  видеоролик  кром  тог  мы  сдела  стольк  оптимизац  в  разн  мест  код  что  все  их  зде  не  перечисл  как  например  оптимизац  энтропийн  декодер  котор  сдела  дэвид  я  такж  хотел  бы  поблагодар  эл  фридма  за  ег  неоценим  помощ  в  тестирован  производительн  большинств  эт  улучшен  что  дальш  ассемблерн  код  altivec  ppc  фактическ  отсутств  ест  всег  нескольк  функц  из  код  компенсац  движен  дэвид  ассемблерн  код  для  neon  arm  нет  вообщ  а  нам  он  нуж  чтоб  работа  быстр  и  на  мобильн  устройств  конечн  все  эт  будет  со  времен  и  как  обычн  мы  всегд  рад  патч  приложен  гол  цифр  вот  цифр  соответств  приведен  выш  график  в  кадр  в  секунд  и  со  стандартн  ошибк  core  i7  620qm  16ghz  windows  7  32-bit  parkjoy  ffvp8  4458  ±  044  parkjoy  libvpx  3306  ±  023  sintel  ffvp8  7426  ±  118  sintel  libvpx  5611  ±  096  core  i5  520m  24ghz  linux  64-bit  parkjoy  ffvp8  6829  ±  006  parkjoy  libvpx  4106  ±  004  sintel  ffvp8  11238  ±  037  sintel  libvpx  6964  ±  009  core  2  t9300  25ghz  mac  os  x  1064  64-bit  parkjoy  ffvp8  5409  ±  002  parkjoy  libvpx  3368  ±  001  sintel  ffvp8  8754  ±  003  sintel  libvpx  5274  ±  004  core  duo  2ghz  mac  os  x  1064  32-bit  parkjoy  ffvp8  2131  ±  002  parkjoy  libvpx  1796  ±  000  sintel  ffvp8  4124  ±  001  sintel  libvpx  2965  ±  002  atom  n270  16ghz  linux  32-bit  parkjoy  ffvp8  1529  ±  001  parkjoy  libvpx  1246  ±  001  sintel  ffvp8  2687  ±  005  sintel  libvpx  2041  ±  002  примечан  переводчик  некотор  термин  оста  для  мен  загадк  например  есл  кто-нибуд  сможет  подсказа  верн  русск  перевод  6-tap  filter  я  буд  очен  признател  ниж  в  комментар  к  заметк  автор  дает  ответ  на  некотор  вопрос  читател  част  котор  я  счел  уместн  привест  и  зде  эт  не  прям  перевод  вопрос  и  ответ  скор  кратк  изложен  их  сут  в  сможет  ли  ffvp8  использова  улучшен  котор  внос  в  libvpx  о  фактическ  все  оптимизац  котор  показа  интересн    уж  взят  оттуд  но  над  понима  что  прост  слиян  merge  исходник  тут  не  обход  поскольк  архитектур  у  декодер  принципиальн  различа  в  нет  ли  опасн  что  ffvp8  не  сможет  поддержива  совместим  с  экспериментальн  ветк  разработк  libvpx  о  так  задач  и  не  сто  так  как  на  дан  момент  экспериментальн  ветк  не  предназнач  для  использован  в  реальн  услов  не  гарантир  даж  совместим  экспериментальн  ветк  с  текущ  libvpx  в  кто  спонсир  разработк  ffmpeg  о  целик  проект    никт  но  некотор  разработчик  получа  деньг  за  реализац  фич  необходим  конкретн  заказчик  наскольк  известн  автор  разработк  ffvp8  был  полност  некоммерческ  в  увеличен  производительн  связа  с  одн  каким-т  глобальн  недостатк  libvpx  ил  прост  слож  множеств  оптимизац  тут  и  там  о  в  цел  скор  втор  но  основн  прирост  производительн  дал  то  что  libvpx  проход  по  кадр  нескольк  раз  аналогичн  образ  поступа  и  все  предыдущ  кодек  on2  а  ffvp8  дела  все  операц  за  один  проход  в  планир  ли  разработк  собствен  энкодер  vp8  в  ffmpeg  о  эт  очен  больш  работ  и  есл  честн  я  сомнева  что  он  когда-нибуд  будет  сдела  фактическ  единствен  родн  энкодер  котор  ест  в  ffmpeg    эт  энкодер  mpeg  и  вряд  ли  найдет  способ  сдела  энкодер  vp8  тольк  на  баз  имеющ  фреймворк  во  всяк  случа  прост  этот  способ  не  будет  но  конечн  есл  кто-т  хочет  попробова  в  но  есл  для  ffmpeg  единствен  родн  энкодер    mpeg  тогд  как  образ  эт  библиотек  поддержива  кодирован  виде  не  тольк  в  mpeg  но  и  в  wmv  78  h2613  и  друг  формат  без  использован  друг  библиотек  о  все  эт  энкодер  фактическ  использ  внутрен  mpeg  энкодер  с  небольш  вариац  для  кажд  формат  след  имет  в  вид  что  энкодер    больш  и  сложн  программ  состоя  из  мног  част  и  единствен  значительн  разниц  межд  энкодер  перечислен  формат    эт  алгоритм  энтропийн  кодирован  и  заголовк  и  то  и  друг  может  быт  легк  замен  без  необходим  меня  ве  остальн  код  вот  поч  в  ffmpeg  стольк  энкодер  котор  все  основа  на  основн  энкодер  mpeg  фактическ  разниц  межд  эт  алгоритм  не  стол  существен  все  он  представля  соб  подоб  mpeg  основа  на  дискретн  косинусн  преобразован  блок  8х8  пиксел  так  что  для  всех  них  может  быт  использова  в  значительн  степен  один  и  тот  же  код  эт  кстат  и  объясня  отсутств  в  ffmpeg  энкодер  wmv9    этот  алгоритм  слишк  отлича  от  предыдущ  верс  чтоб  ег  можн  был  легк  реализова  на  баз  тог  что  ест  в  может  ли  ffvp8  такж  декодирова  vp4  5  6  и  7  о  может  но  тольк  vp4  5  и  6  так  как  никт  пок  не  подверга  vp7  обратн  разработк  но  скор  всег  поддержк  vp7  появ  в  ближайш  будущ  учитыв  открыт  vp8  так  как  ест  у  мен  подозрен  что  vp7  и  vp8  по  больш  част  совпада  в  где  можн  взят  свеж  svn-сборк  media  player  classic  homecinema  и  ffdshow  tryouts  чтоб  посмотрет  сам  на  нов  декодер  под  windows  о  xhmikosr1f0de  есл  возникнут  какие-нибуд  вопрос  к  автор  заметк  я  гот  перевест  их  и  опубликова  в  ег  блог  